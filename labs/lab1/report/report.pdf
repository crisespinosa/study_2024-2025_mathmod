---
## Front matter
title: "Лабораторная работа №1"
subtitle: "Работа с git"
author: "Эспиноса Василита К.М"

## Generic otions
lang: ru-RU
toc-title: "Содержание"

## Bibliography
bibliography: bib/cite.bib
csl: pandoc/csl/gost-r-7-0-5-2008-numeric.csl

## Pdf output format
toc: true # Table of contents
toc-depth: 2
lof: true # List of figures
lot: true # List of tables
fontsize: 12pt
linestretch: 1.5
papersize: a4
documentclass: scrreprt
## I18n polyglossia
polyglossia-lang:
  name: russian
  options:
	- spelling=modern
	- babelshorthands=true
polyglossia-otherlangs:
  name: english
## I18n babel
babel-lang: russian
babel-otherlangs: english
## Fonts
mainfont: IBM Plex Serif
romanfont: IBM Plex Serif
sansfont: IBM Plex Sans
monofont: IBM Plex Mono
mathfont: STIX Two Math
mainfontoptions: Ligatures=Common,Ligatures=TeX,Scale=0.94
romanfontoptions: Ligatures=Common,Ligatures=TeX,Scale=0.94
sansfontoptions: Ligatures=Common,Ligatures=TeX,Scale=MatchLowercase,Scale=0.94
monofontoptions: Scale=MatchLowercase,Scale=0.94,FakeStretch=0.9
mathfontoptions:
## Biblatex
biblatex: true
biblio-style: "gost-numeric"
biblatexoptions:
  - parentracker=true
  - backend=biber
  - hyperref=auto
  - language=auto
  - autolang=other*
  - citestyle=gost-numeric
## Pandoc-crossref LaTeX customization
figureTitle: "Рис."
tableTitle: "Таблица"
listingTitle: "Листинг"
lofTitle: "Список иллюстраций"
lotTitle: "Список таблиц"
lolTitle: "Листинги"
## Misc options
indent: true
header-includes:
  - \usepackage{indentfirst}
  - \usepackage{float} # keep figures where there are in the text
  - \floatplacement{figure}{H} # keep figures where there are in the text
---

# Цель работы

Приобрести практические навыки работы с системой управления версиями Git.


# Теоретическое введение

Git — распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux, первая версия выпущена 7 апреля 2005 года; координатор — Дзюн Хамано 

# Выполнение лабораторной работы

## Подготовка

Сначала настроим core.autocrlf с параметрами true и input, чтобы сделать все переводы строк текстовых файлов в главном репозитории одинаковыми, а затем настроим отображение unicode

![](image/1.PNG){#fig:001 width=70%}

## Создание проекта

Создадим пустой каталог hello, а в нём файл с именем hello.html. Затем создадим git репозиторий из этого каталога, выполнив команду git init. Добавим файл в репозиторий и проверим статус, который сообщает, что коммитить нечего

![](image/2.PNG){#fig:002 width=70%}

![](image/3.PNG){#fig:003 width=70%}

## Внесение изменений

Изменим содержимое файла hello.html. Проверив состояние рабочего каталога увидим, что git знает, что файл hello.html был изменен, но при этом эти изменения еще не зафиксированы в репозитории. Теперь проиндексируем изменения и снова посмотрим статус, в нём указано, что изменения пока не записаны в резапозиторий. И наконец закоммитим изменения.

![](image/4.PNG){#fig:004 width=70%}

Изменим страницу «Hello, World», чтобы она содержала стандартные теги
Теперь добавим это изменение в индекс git и добавим заголовки HTML (секцию ) к странице «Hello, World». Проверив текущий статус увидим, что hello.html указан дважды в состоянии. Первое изменение (добавление стандартных тегов) проиндексировано и готово к коммиту. Второе изменение (добавление заголовков HTML) является непроиндексированным. Произведем коммит проиндексированного изменения, затем проиндексируем оставшееся изменение, посмотрим статус и прокоммитим его

![](image/5.PNG){#fig:005 width=70%}

![](image/6.PNG){#fig:006 width=70%}

## История

Получим список произведенных изменений, затем в однострочном, а также с указанием времени и количества

![](image/7.PNG){#fig:007 width=70%}

## Получение старых версий

Изучим данные лога и найдем там хэш первого коммита, используя его вернемся к первой верссии и просмотрим файл hello.html, действительно, увидим первую версию. Затем вернемся к последней версии в ветке master

![](image/8.PNG){#fig:008 width=70%}


## Создание тегов версий

Назовем текущую версию страницы hello первой (v1). Создадим тег первой версии и используем его для того чтобы венуться к предыдущей, которой также присвоим тег.

![](image/9.PNG){#fig:009 width=70%}

Переключимся по тегам между двумя отмеченными версиями. Просмотрим все доступные теги(их два) и посмотрим теги в логе

![](image/10.PNG){#fig:010 width=70%}

## Отмена локальных изменений (до индексации)

Убдеимся, что мы находимся на последнем коммите ветки master и внесем изменение в файл hello.html в виде нежелательного комментария. Затем проверим статус, увидим, что изменения ещё не проиндексированы. Используем команду git checkout для переключения версии файла hello.html в репозитории

![](image/11.PNG){#fig:011 width=70%}

## Отмена проиндексированных изменений (перед коммитом)

Используем команду git reset, чтобы сбросить буферную зону к HEAD. Это очищает буферную зону от изменений, которые мы только что проиндексировали. И переключимся на последнюю версию коммита, посмотрев статус увидим, что наш каталог опять чист

![](image/12.1.PNG){#fig:012 width=70%}

![](image/12.2.PNG){#fig:013 width=70%}

![](image/13.1.PNG){#fig:014 width=70%}
## Отмена коммитов

Проиндексируем изменения файла и прокоммитим их. Чтобы отменить коммит, нам необходимо сделать коммит, который удаляет изменения, сохраненные нежелательным коммитом. 

![](image/13.2.PNG){#fig:015 width=70%}

![](image/14.PNG){#fig:016 width=70%}

## Удаление коммиттов из ветки

Удалим последние два коммита с помощью сброса, сначала отметим последний коммит тегом, чтобы его можно было потом найти. Используем команду git reset, чтобы вернуться к версии до этих коммитов

![](image/15.PNG){#fig:017 width=70%}

![](image/15.2.PNG){#fig:018 width=70%}

## Удаление тега oops

Удалим тег oops и коммиты, на которые он ссылался, сборщиком мусора. Теперь этот тег не отображается в репозитории

![](image/16.PNG){#fig:019 width=70%}

## Изменение предыдущего коммита

Теперь мы хотим добавить в комментарий автора почту, обноим страницу hello, включив в неё почту. Чтобы у нас остался один коммит, а не два, изменим последний с помощьб опции --amend

![](image/17.PNG){#fig:020 width=70%}

![](image/18.PNG){#fig:021 width=70%}

## Перемещение файлов

Переместим наш файл в каталог lib.

![](image/20.1.PNG){#fig:022 width=70%}

![](image/21.2.PNG){#fig:023 width=70%

![](image/20.3.PNG){#fig:024 width=70%}}

## Работа непосредственно с объектами git

Найдем последний коммит и выедем его с помощью SHA1 хэша. Затем посмотрим дерево каталогов, ссылка на который идёт в последнем коммите, вывдем каталог lib и файл hello.html

![](image/21.PNG){#fig:025 width=70%}}

## Создание ветки

Создадим новую ветку «style» и перейдем в неё. 

![](image/22.PNG){#fig:026 width=70%}}

![](image/23.PNG){#fig:027 width=70%}}

![](image/24.PNG){#fig:028 width=70%}}

![](image/25.PNG){#fig:029 width=70%}}

## Навигация по веткам

![](image/26.PNG){#fig:030 width=70%}}

![](image/28.PNG){#fig:031 width=70%}}

Переключимся обратно на основную ветку и просмотрим содержимое файла ib/hello.html

## Изменения в ветке master

Вернемся в основную ветку и добавим файл README.md. Просмотрим ветки и их различия

![](image/25.PNG){#fig:032 width=70%}}

## Слияние

Слияние переносит изменения из двух веток в одну. Вернемся к ветке style и сольем master с style

![](image/27.PNG){#fig:033 width=70%}}

Вернемся в ветку master и создадим конфликт, внеся изменения в файл hello.html. Просмотрим ветки. После коммита «Added README» ветка master была объединена с веткой style, но в настоящее время в master есть дополнительный коммит, который не был слит с style. 

![](image/28.PNG){#fig:034 width=70%}}


## Разрешение конфликтов

Вернемся к ветке style и попытаемся объединить ее с новой веткой master. В файле lib/hello.html можно увидеть записи с обеих версий этого файла. Первый раздел — версия текущей ветки (style). Второй раздел — версия ветки master. Внесем изменения в lib/hello.html, оставив только необходимую нам запись и добавим этот файл в репозиторий, чтобы вручную разрешить конфликт

![](image/29.PNG){#fig:035 width=70%}}

![](image/30.PNG){#fig:036 width=70%}}

## Сброс ветки style

Вернемся на ветке style к точке перед тем, как мы слили ее с веткой master. Мы хотим вернуться в ветке style в точку перед слиянием с master

![](image/32.PNG){#fig:037 width=70%}}

Мы видим, что коммит «Updated index.html» был последним на ветке style перед слиянием. 

## Сброс ветки master

Давайте вернемся в ветке master в точку перед внесением конфликтующих изменений. Это позволяет нам продемонстрировать работу команды git rebase, не беспокоясь о конфликтах.

![](image/34.PNG){#fig:038 width=70%}}

Коммит «Added README» идет непосредственно перед коммитом конфликтующего интерактивного режима. 

## Перебазирование

Используем команду rebase вместо команды merge. Мы вернулись в точку до первого слияния и хотим перенести изменения из ветки master в нашу ветку style. 

![](image/33.PNG){#fig:039 width=70%}}

## Клонирование репозиториев

Перейдем в наш рабочий каталог и сделаем клон репозитория hello, затем создадим клон репозитория. Просмотрев его увидим список всех файлов на верхнем уровне оригинального репозитория README.md, index.html и lib. Затем просмотрим историю репозитория и увидим список всех коммитов в новый репозиторий, и он совпадает с историей коммитов в оригинальном репозитории. 

![](image/35.PNG){#fig:040 width=70%}}

Клонированный репозиторий знает об имени по умолчанию удаленного репозитория.

![](image/36.PNG){#fig:041 width=70%}}

## Изменение оригинального репозитория

Перейдем в репозиторий hello. Внесем изменения в файл README.md. Затем добавим их в репозиторий

![](image/38.PNG){#fig:042 width=70%}}

## Создание чистого репозитория

Как правило, репозитории, оканчивающиеся на .git являются чистыми репозиториями. Создадим такой в рабочем каталоге. Затем добавим репозиторий hello.git к нашему оригинальному репозиторию

![](image/39.PNG){#fig:043 width=70%}}

Так как чистые репозитории, как правило, расшариваются на каком-нибудь сетевом сервере, нам необходимо отправить наши изменения в другие репозитории. Начнем с создания изменения для отправки. Отредактируем файл README.md и сделаем коммит, затем отправим изменения в общий репозиторий. Затем извлечем изменения из общего репозитория

![](image/40.PNG){#fig:044 width=70%}}



# Выводы

В процессе выполнения данной лабораторной работы я приобрела практические навыки работы с Git.

# Список литературы{.unnumbered}

::: {#refs}
:::
